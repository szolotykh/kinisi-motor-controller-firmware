// ----------------------------------------------------------------------------
// Kinisi motr controller commands.
// This file is auto generated by the commands generator from JSON file.
// Do not edit this file manually.
// Timestamp: 2023-11-08 22:50:00
// Version: 1.0.2
// ----------------------------------------------------------------------------

#pragma once

#include <stdint.h>

// Commands// This command initializes a motor and prepares it for use.
#define INITIALIZE_MOTOR 0x01

// This command sets the speed of the specified motor.
#define SET_MOTOR_SPEED 0x02

// This command stops motor by setting its speed to 0.
#define STOP_MOTOR 0x03

// This command brakes motor by setting its speed to 0.
#define BRAKE_MOTOR 0x04

// This command sets the controller for the specified motor.
#define INITIALIZE_MOTOR_CONTROLLER 0x05

// This command sets the target velocity for the specified motor.
#define SET_MOTOR_TARGET_VELOCITY 0x06

// This command deletes the controller for the specified motor.
#define DELETE_MOTOR_CONTROLLER 0x07

// This command initializes an encoder and prepares it for use.
#define INITIALIZE_ENCODER 0x11

// This command retrieves the current value of the encoder.
#define GET_ENCODER_VALUE 0x12

// This command initializes a digital pin and prepares it for use.
#define INITIALIZE_GPIO_PIN 0x20

// This command sets the specified pin to a state.
#define SET_GPIO_PIN_STATE 0x21

// This command gets the state of the specified pin.
#define GET_GPIO_PIN_STATE 0x22

// This command toggles the specified pin.
#define TOGGLE_GPIO_PIN_STATE 0x23

// This command sets the status LED to a state.
#define SET_STATUS_LED_STATE 0x25

// This command toggles the status LED.
#define TOGGLE_STATUS_LED_STATE 0x26

// This command initializes a mecanum platform and prepares it for use.
#define INITIALIZE_MECANUM_PLATFORM 0x30

// This command sets the velocity input for the platform.
#define SET_PLATFORM_VELOCITY_INPUT 0x40

// This command sets the controller for the platform.
#define SET_PLATFORM_CONTROLLER 0x41


#pragma pack(push, 1)
typedef struct
{
    uint8_t commandType;  //command type
    union {   //Union to support different properties of each command
        // INITIALIZE_MOTOR: This command initializes a motor and prepares it for use.
        struct {
            uint8_t motor_index; // The index of the motor to initialize.
            uint8_t is_reversed; // Whether or not the motor is reversed.
        } initialize_motor;

        // SET_MOTOR_SPEED: This command sets the speed of the specified motor.
        struct {
            uint8_t motor_index; // The index of the motor to set the speed for.
            uint8_t direction; // The direction of the motor.
            uint16_t speed; // The speed of the motor.
        } set_motor_speed;

        // STOP_MOTOR: This command stops motor by setting its speed to 0.
        struct {
            uint8_t motor_index; // The index of the motor to set the speed for.
        } stop_motor;

        // BRAKE_MOTOR: This command brakes motor by setting its speed to 0.
        struct {
            uint8_t motor_index; // The index of the motor to set the speed for.
        } brake_motor;

        // INITIALIZE_MOTOR_CONTROLLER: This command sets the controller for the specified motor.
        struct {
            uint8_t motor_index; // The index of the motor to set the controller for.
            double kp; // Proportional constant of PID
            double ki; // Integral constant of PID
            double kd; // Derivative constant of PID
        } initialize_motor_controller;

        // SET_MOTOR_TARGET_VELOCITY: This command sets the target velocity for the specified motor.
        struct {
            uint8_t motor_index; // The index of the motor to set the target velocity for.
            uint8_t direction; // The direction of the motor.
            uint16_t speed; // The speed of the motor.
        } set_motor_target_velocity;

        // DELETE_MOTOR_CONTROLLER: This command deletes the controller for the specified motor.
        struct {
            uint8_t motor_index; // The index of the motor to delete the controller for.
        } delete_motor_controller;

        // INITIALIZE_ENCODER: This command initializes an encoder and prepares it for use.
        struct {
            uint8_t encoder_index; // The index of the encoder to initialize.
        } initialize_encoder;

        // GET_ENCODER_VALUE: This command retrieves the current value of the encoder.
        struct {
            uint8_t encoder_index; // The index of the encoder to retrieve the value for.
        } get_encoder_value;

        // INITIALIZE_GPIO_PIN: This command initializes a digital pin and prepares it for use.
        struct {
            uint8_t pin_number; // The number of the pin to initialize.
            uint8_t mode; // Set digital pin as input or output. Modes: 0 = INPUT_PULLDOWN, 1 = INPUT_PULLUP, 2 = INPUT_NOPULL, 3 = OUTPUT.
        } initialize_gpio_pin;

        // SET_GPIO_PIN_STATE: This command sets the specified pin to a state.
        struct {
            uint8_t pin_number; // The number of the pin to set to a state.
            uint8_t state; // The state of the pin. 0 = LOW, 1 = HIGH.
        } set_gpio_pin_state;

        // GET_GPIO_PIN_STATE: This command gets the state of the specified pin.
        struct {
            uint8_t pin_number; // The number of the pin to get the state for.
        } get_gpio_pin_state;

        // TOGGLE_GPIO_PIN_STATE: This command toggles the specified pin.
        struct {
            uint8_t pin_number; // The number of the pin to toggle.
        } toggle_gpio_pin_state;

        // SET_STATUS_LED_STATE: This command sets the status LED to a state.
        struct {
            uint8_t state; // The state of the status LED. 0 = OFF, 1 = ON.
        } set_status_led_state;

        // TOGGLE_STATUS_LED_STATE: This command toggles the status LED.
        struct {
        } toggle_status_led_state;

        // INITIALIZE_MECANUM_PLATFORM: This command initializes a mecanum platform and prepares it for use.
        struct {
            uint8_t is_reversed_0; // Determins if motor 0 is reversed.
            uint8_t is_reversed_1; // Determins if motor 1 is reversed.
            uint8_t is_reversed_2; // Determins if motor 2 is reversed.
            uint8_t is_reversed_3; // Determins if motor 3 is reversed.
        } initialize_mecanum_platform;

        // SET_PLATFORM_VELOCITY_INPUT: This command sets the velocity input for the platform.
        struct {
            int8_t x; // X component of platform velocity input.
            int8_t y; // Y component of platform velocity input.
            int8_t t; // Theta component of platform velocity input.
        } set_platform_velocity_input;

        // SET_PLATFORM_CONTROLLER: This command sets the controller for the platform.
        struct {
        } set_platform_controller;

    } properties;
} controller_command_t;
#pragma pack(pop)

